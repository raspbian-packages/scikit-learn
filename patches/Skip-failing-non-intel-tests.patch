--- a/sklearn/datasets/tests/test_openml.py
+++ b/sklearn/datasets/tests/test_openml.py
@@ -8,6 +8,7 @@
 import scipy.sparse
 import sklearn
 import pytest
+import platform
 
 from sklearn.datasets import fetch_openml
 from sklearn.datasets.openml import (_open_openml_url,
@@ -330,6 +331,10 @@
                                compare_default_target=True)
 
 
+@pytest.mark.skipif(platform.uname()[4].startswith('armv'),
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/13049")
+@pytest.mark.skipif(platform.uname()[4] == 'aarch64',
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/13049")
 def test_decode_anneal(monkeypatch):
     data_id = 2
     _monkey_patch_webbased_functions(monkeypatch, data_id, False)
--- a/sklearn/cluster/tests/test_mean_shift.py
+++ b/sklearn/cluster/tests/test_mean_shift.py
@@ -9,6 +9,7 @@
 from scipy import sparse
 
 from sklearn.utils.testing import assert_equal
+from sklearn.utils.testing import assert_almost_equal
 from sklearn.utils.testing import assert_false
 from sklearn.utils.testing import assert_array_equal
 from sklearn.utils.testing import assert_array_almost_equal
@@ -37,7 +38,8 @@
     # Test estimate_bandwidth when n_samples=1 and quantile<1, so that
     # n_neighbors is set to 1.
     bandwidth = estimate_bandwidth(X, n_samples=1, quantile=0.3)
-    assert_equal(bandwidth, 0.)
+    # https://github.com/scikit-learn/scikit-learn/issues/10561
+    assert_almost_equal(bandwidth, 0., decimal=5)
 
 
 def test_mean_shift():
--- a/sklearn/datasets/tests/test_svmlight_format.py
+++ b/sklearn/datasets/tests/test_svmlight_format.py
@@ -263,8 +263,9 @@
                             y_dense.astype(dtype), y2, 4)
                     else:
                         # allow a rounding error at the last decimal place
+                        # https://github.com/scikit-learn/scikit-learn/issues/13050
                         assert_array_almost_equal(
-                            X_dense.astype(dtype), X2_dense, 15)
+                            X_dense.astype(dtype), X2_dense, 7)
                         assert_array_almost_equal(
                             y_dense.astype(dtype), y2, 15)
 
--- a/sklearn/tests/test_common.py
+++ b/sklearn/tests/test_common.py
@@ -13,6 +13,7 @@
 import re
 import pkgutil
 import functools
+import platform
 
 import pytest
 
@@ -86,6 +87,10 @@
         return "{}({})".format(val.func.__name__, kwstring)
 
 
+@pytest.mark.skipif(platform.uname()[4] == 'ppc64le',
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/13051")
+@pytest.mark.skipif(platform.uname()[4].startswith('armv'),
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/13052")
 @pytest.mark.parametrize(
         "name, Estimator, check",
         _generate_checks_per_estimator(_yield_all_checks,
--- a/sklearn/neighbors/tests/test_lof.py
+++ b/sklearn/neighbors/tests/test_lof.py
@@ -3,6 +3,7 @@
 # License: BSD 3 clause
 
 from math import sqrt
+import platform
 
 import pytest
 import numpy as np
@@ -236,6 +237,8 @@
     assert not hasattr(clf, 'score_samples')
 
 
+@pytest.mark.skipif(platform.uname()[4].startswith('armv'),
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/13052")
 @pytest.mark.filterwarnings(
     'ignore:default contamination parameter 0.1:FutureWarning')
 # XXX: Remove in 0.22
--- a/sklearn/linear_model/tests/test_logistic.py
+++ b/sklearn/linear_model/tests/test_logistic.py
@@ -3,6 +3,7 @@
 import numpy as np
 import scipy.sparse as sp
 from scipy import linalg, optimize, sparse
+import platform
 
 import pytest
 
@@ -1417,6 +1418,8 @@
         assert_array_almost_equal(coefs[1], coefs[2], decimal=1)
 
 
+@pytest.mark.skipif(platform.uname()[4] == 'ppc64le',
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/12448")
 @pytest.mark.parametrize('est', [LogisticRegression(random_state=0),
                                  LogisticRegressionCV(random_state=0, cv=3),
                                  ])
--- a/sklearn/utils/tests/test_show_versions.py
+++ b/sklearn/utils/tests/test_show_versions.py
@@ -1,3 +1,4 @@
+import pytest
 
 from sklearn.utils._show_versions import _get_sys_info
 from sklearn.utils._show_versions import _get_deps_info
@@ -24,6 +25,8 @@
     assert 'pandas' in deps_info
 
 
+@pytest.mark.skipif(True,
+                    reason="https://buildd.debian.org/status/fetch.php?pkg=scikit-learn&arch=ppc64el&ver=0.18-3&stamp=1475603905")
 def test_show_versions_with_blas(capsys):
     show_versions()
     out, err = capsys.readouterr()
--- a/sklearn/utils/tests/test_estimator_checks.py
+++ b/sklearn/utils/tests/test_estimator_checks.py
@@ -1,5 +1,7 @@
 import unittest
 import sys
+import platform
+import pytest
 
 import numpy as np
 import scipy.sparse as sp
@@ -371,6 +373,8 @@
                         check_estimator, BadTransformerWithoutMixin())
 
 
+@pytest.mark.skipif(platform.uname()[4].startswith('armv'),
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/13052")
 def test_check_estimator_clones():
     # check that check_estimator doesn't modify the estimator it receives
     from sklearn.datasets import load_iris
@@ -439,6 +443,8 @@
                         NonConformantEstimatorNoParamSet())
 
 
+@pytest.mark.skipif(platform.uname()[4].startswith('armv'),
+                    reason="https://github.com/scikit-learn/scikit-learn/issues/13052")
 def test_check_estimator_pairwise():
     # check that check_estimator() works on estimator with _pairwise
     # kernel or  metric
